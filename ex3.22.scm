(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (insert item)
      (let ((new-pair (cons item '())))
	(cond ((empty?)
	       (set! front-ptr new-pair)
	       (set! rear-ptr new-pair)
	       (cons front-ptr rear-ptr))
	      (else
	       (set-cdr! rear-ptr new-pair)
	       (set! rear-ptr new-pair)
	       (cons front-ptr rear-ptr)))))
    (define (dispatch m)
      (cond ((eq? m 'front)
	     (if (empty?)
		 (error "FRONT called on an empty queue")
		 (car front-ptr)))
	    ((eq? m 'insert) insert)
	    ((eq? m 'delete)
	     (if (empty?)
		 (error "DELETE! called on an empty queue")
		 (begin (set! front-ptr (cdr front-ptr))
			(cons front-ptr rear-ptr))))
	    (else (error "Undefined operation -- QUEUE" m))))
    dispatch))

(define (front-queue queue) (queue 'front))

(define (insert-queue! queue item) ((queue 'insert) item))

(define (delete-queue! queue) (queue 'delete))

